app: positianstream
deployment_commit: 09df525f
deployment_ref: xx-14530-be--env01

replicaCount: 1
image:
  repository: docker.repo.xxx.xxx/geolocationplatformgroup/positian-stream
  tag: 2.38.2-202508251041

containerPorts:
  - name: serviceport
    port: 8090
    protocol: TCP

env:
  - name: JAVA_TOOL_OPTIONS
    value: -XX:MaxRAMPercentage=60.0 -XX:+UseG1GC -XX:+ExitOnOutOfMemoryError -XX:+UseStringDeduplication
  - name: LOGGING_LEVEL_COM_XXX
    value: INFO
  - name: MANAGEMENT_SERVER_PORT
    value: "8090"
  - name: SPRING_PROFILES_ACTIVE
  - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
    value: info,health,prometheus
  - name: POSITIAN_CLEANEXPIREDDEVICES_CRON
    value: 0 * * * * ?
  - name: POSITIAN_CLEANEXPIREDDEVICES_EXPIRATIONAGE
    value: PT60m
  - name: POSITIAN_CLEANEXPIREDDEVICES_EVICTIONAGE
    value: PT24h
  - name: RNS_MATCHTRACKSENDPOINTURL
    value: http://roadnetworkservice:8090/roadnetwork/europe/v1/matchtracks
  - name: RNS_CONNECTION_POOL_SIZE
    value: "64"
  - name: KAFKA_BOOTSTRAP_SERVERS
    value: xxxx.servicebus.windows.net:9093
  - name: KAFKA_CONSUMER_CHARGINGPOSITIONTOPIC_NAME
    value: charging-position
  - name: KAFKA_CONSUMER_CHARGINGPOSITIONTOPIC_CONCURRENCY
    value: "32"
  - name: KAFKA_CONSUMER_CIRCUITBREAKER_ENABLED
    value: "true"
  - name: KAFKA_CONSUMER_CIRCUITBREAKER_PARTITIONMAXFAILURES
    value: "10"
  - name: KAFKA_CONSUMER_CIRCUITBREAKER_PARTITIONFAILURESWINDOW
    value: "100"
  - name: KAFKA_PRODUCER_MATCHEDROUTETOPIC_NAME
    value: matched-route
  - name: KAFKA_PRODUCER_MATCHEDPOSITIONTOPIC_NAME
    value: matched-position
  - name: KAFKA_PRODUCER_DEADLETTERTOPIC_NAME
    value: charging-position-dlt
  - name: SPRING_DATA_REDIS_HOST
    value: xxxx.redis.cache.windows.net
  - name: SPRING_DATA_REDIS_PORT
    value: "6379"
  - name: SPRING_DATA_REDIS_SSL_ENABLED
    value: "false"
  - name: SPRING_DATA_REDIS_DATABASE
    value: "1"
  - name: REDIS_CUSTOM_KEY_PREFIX

envFrom:
  - secretRef:
      name: positianstream-secret

resources:
  limits:
    cpu: 800m
    memory: 1280Mi
    ephemeral-storage: 1Gi
  requests:
    cpu: 266m
    memory: 1280Mi
    ephemeral-storage: 1Gi

lifecycle:
  preStop:
    exec:
      command: ["sleep", "20"]

livenessProbe:
  httpGet:
    path: /manage/health
    port: 8090
    scheme: HTTP
  initialDelaySeconds: 3
  periodSeconds: 20
  timeoutSeconds: 20
  successThreshold: 1
  failureThreshold: 10

readinessProbe:
  httpGet:
    path: /manage/health
    port: 8090
    scheme: HTTP
  initialDelaySeconds: 3
  periodSeconds: 20
  timeoutSeconds: 20
  successThreshold: 1
  failureThreshold: 5

startupProbe:
  httpGet:
    path: /manage/health
    port: 8090
    scheme: HTTP
  initialDelaySeconds: 3
  periodSeconds: 20
  timeoutSeconds: 20
  successThreshold: 1
  failureThreshold: 7

hostAliases:
  - ip: x.x.x.x
    hostnames:
      - xxxxx.blob.core.windows.net
      - xxxxx-secondary.blob.core.windows.net
      - xxxx.blob.core.windows.net
      - xxxx.redis.cache.windows.net

terminationGracePeriodSeconds: 60

service:
  sessionAffinity: None
  internalTrafficPolicy: Cluster
  ipFamily: IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - name: serviceport
      port: 8090
      protocol: TCP
      targetPort: 8090

autoscaling:
  enabled: true
  container: positianstream
  minReplicas: 1
  maxReplicas: 4
  targetCPUAverageValue: 480m
  scaleUp:
    pods: 2
    periodSeconds: 60
    selectPolicy: Max
    stabilizationWindowSeconds: 60
  scaleDown:
    pods: 1
    periodSeconds: 180
    selectPolicy: Max
    stabilizationWindowSeconds: 300

networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/cluster-service: "true"
          podSelector:
            matchLabels:
              kubernetes.azure.com/managedby: aks
        - podSelector:
            matchLabels:
              app: k8s-ansible-helper
      ports:
        - port: 8090
          protocol: TCP
  egress:
    - ports:
        - port: 53
          protocol: UDP
      to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/cluster-service: "true"
          podSelector:
            matchLabels:
              k8s-app: kube-dns
    - ports:
        - port: 9093
          protocol: TCP
      to:
        - ipBlock:
            cidr: 0.0.0.0/0
    - ports:
        - port: 6379
          protocol: TCP
      to:
        - ipBlock:
            cidr: 0.0.0.0/0
    - ports:
        - port: 8090
          protocol: TCP
      to:
        - podSelector:
            matchLabels:
              app: roadnetworkservice

secret:
  enabled: true
  data:
    AZMON_COLLECT_ENV: xx=
    KAFKA_PASSWORD: xx
    KAFKA_USER: xxx=
    SPRING_DATA_REDIS_PASSWORD: xx=
